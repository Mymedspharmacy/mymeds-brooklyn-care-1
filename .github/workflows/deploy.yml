name: Deploy MyMeds Pharmacy

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: mymeds_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install frontend dependencies
      run: npm ci
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
    
    - name: Setup database
      run: |
        cd backend
        echo "DATABASE_URL=mysql://root:root@localhost:3306/mymeds_test" > .env
        npx prisma generate
        npx prisma migrate deploy
    
    - name: Run frontend tests
      run: npm test
    
    - name: Run backend tests
      run: |
        cd backend
        npm test
    
    - name: Build frontend
      run: npm run build
    
    - name: Build backend
      run: |
        cd backend
        npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
    
    - name: Build application
      run: |
        npm run build
        cd backend && npm run build
    
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          # Create deployment directory
          mkdir -p /var/www/mymeds
          
          # Stop existing processes
          pm2 stop mymeds-backend || true
          pm2 delete mymeds-backend || true
          
          # Backup current deployment
          if [ -d "/var/www/mymeds/current" ]; then
            cp -r /var/www/mymeds/current /var/backups/mymeds/$(date +%Y%m%d_%H%M%S)
          fi
    
    - name: Copy files to VPS
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        source: "dist/*,backend/dist/*,backend/prisma/*,backend/package.json,backend/ecosystem.config.js"
        target: "/var/www/mymeds/current"
    
    - name: Setup production environment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          cd /var/www/mymeds/current
          
          # Install production dependencies
          npm ci --production
          cd backend && npm ci --production
          
          # Setup environment variables
          cat > backend/.env << EOF
          NODE_ENV=production
          PORT=4000
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
          ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
          CORS_ORIGINS=https://mymedspharmacyinc.com,http://localhost:3000
          SMTP_HOST=smtp.gmail.com
          SMTP_PORT=587
          SMTP_USER=mymedspharmacyinc@gmail.com
          SMTP_PASS=${{ secrets.SMTP_PASS }}
          FRONTEND_URL=https://mymedspharmacyinc.com
          EOF
          
          # Run database migrations
          cd backend
          npx prisma generate
          npx prisma migrate deploy
          
          # Start application with PM2
          pm2 start ecosystem.config.js
          pm2 save
          
          # Reload Nginx
          nginx -t && systemctl reload nginx
          
          # Health check
          sleep 10
          curl -f http://localhost:4000/api/health || exit 1