generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  name          String
  role          Role           @default(CUSTOMER)
  isActive      Boolean        @default(true)
  emailVerified Boolean        @default(false)
  permissions   String?        // JSON string of permissions
  lastLoginAt   DateTime?
  passwordChangedAt DateTime?
  resetPasswordToken String?
  resetPasswordExpires DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  appointments  Appointment[]
  orders        Order[]
  prescriptions Prescription[]
  reviews       Review[]
  refillRequests RefillRequest[]
  transferRequests TransferRequest[]
  patientProfile PatientProfile?
  carts         Cart[]
  
  @@index([email])
  @@index([role])
  @@index([createdAt])
  @@index([isActive])
  @@index([emailVerified])
}

model PatientProfile {
  id                          Int      @id @default(autoincrement())
  userId                      Int      @unique
  firstName                   String
  lastName                    String
  dateOfBirth                 DateTime
  phone                       String
  ssn                         String   // Encrypted SSN
  address                     String
  city                        String
  state                       String
  zipCode                     String
  emergencyContactName        String
  emergencyContactPhone       String
  emergencyContactRelationship String
  insuranceProvider           String
  insuranceGroupNumber        String
  insuranceMemberId           String
  primaryCarePhysician        String
  physicianPhone              String
  allergies                   String?
  currentMedications          String?
  medicalConditions           String?
  governmentIdType            String
  governmentIdNumber          String
  governmentIdFile            String?  // File path
  proofOfAddressFile          String?  // File path
  insuranceCardFile           String?  // File path
  verificationStatus          String   @default("PENDING") // PENDING, VERIFIED, REJECTED
  identityVerified            Boolean  @default(false)
  addressVerified             Boolean  @default(false)
  insuranceVerified           Boolean  @default(false)
  termsAccepted               Boolean  @default(false)
  privacyPolicyAccepted       Boolean  @default(false)
  hipaaConsent                Boolean  @default(false)
  medicalAuthorization        Boolean  @default(false)
  financialResponsibility     Boolean  @default(false)
  securityQuestions           String?  // JSON string
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  user                        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([verificationStatus])
  @@index([identityVerified])
  @@index([createdAt])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Product {
  id          Int              @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  imageUrl    String? // legacy, keep for now
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  categoryId  Int
  category    Category         @relation(fields: [categoryId], references: [id])
  orders      OrderItem[]
  images      ProductImage[]
  variants    ProductVariant[]
  Review      Review[]
  cartItems   CartItem[]
  
  @@index([categoryId])
  @@index([price])
  @@index([stock])
  @@index([createdAt])
  @@index([name])
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int?        // Optional for guest orders
  cartId    Int?        // Reference to cart if order was created from cart
  total     Float
  status    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  notified  Boolean     @default(false)
  
  // Guest order information
  guestEmail        String?
  guestName         String?
  guestPhone        String?
  shippingAddress   String?
  shippingCity      String?
  shippingState     String?
  shippingZipCode   String?
  shippingCountry   String? @default("USA")
  
  // Order metadata
  orderNumber       String   @unique // Human-readable order number
  paymentStatus     String   @default("pending") // pending, paid, failed, refunded
  paymentMethod     String?  // stripe, paypal, etc.
  paymentIntentId   String?  // Stripe payment intent ID
  shippingMethod    String?  // standard, express, overnight
  shippingCost      Float    @default(0)
  taxAmount         Float    @default(0)
  subtotal          Float    // Before tax and shipping
  
  // Relationships
  user      User?        @relation(fields: [userId], references: [id])
  cart      Cart?        @relation(fields: [cartId], references: [id])
  items     OrderItem[]
  tracking  GuestOrderTracking?
  
  @@index([notified, createdAt])
  @@index([orderNumber])
  @@index([guestEmail])
  @@index([status, createdAt])
  @@index([paymentStatus])
  @@index([cartId])
}

model GuestOrderTracking {
  id          Int      @id @default(autoincrement())
  orderId     Int      @unique
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  trackingNumber String? // Shipping tracking number
  estimatedDelivery DateTime?
  deliveredAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([trackingNumber])
  @@index([estimatedDelivery])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  
  @@index([orderId])
  @@index([productId])
}

model Prescription {
  id           Int      @id @default(autoincrement())
  userId       Int
  medication   String
  dosage       String
  instructions String
  createdAt    DateTime @default(now())
  notified     Boolean  @default(false)
  user         User     @relation(fields: [userId], references: [id])
  @@index([notified, createdAt])
}

model RefillRequest {
  id           Int      @id @default(autoincrement())
  userId       Int
  prescriptionId Int?
  medication   String
  dosage       String
  instructions String?
  urgency      String   @default("normal") // low, normal, high, urgent
  status       String   @default("pending") // pending, approved, rejected, completed
  notes        String?
  requestedDate DateTime @default(now())
  completedDate DateTime?
  notified     Boolean  @default(false)
  user         User     @relation(fields: [userId], references: [id])
  @@index([notified, requestedDate])
  @@index([status, requestedDate])
}

model TransferRequest {
  id              Int      @id @default(autoincrement())
  userId          Int
  currentPharmacy String
  newPharmacy     String   @default("My Meds Pharmacy")
  medications     String   // JSON array of medications
  reason          String?
  status          String   @default("pending") // pending, approved, rejected, completed
  notes           String?
  requestedDate   DateTime @default(now())
  completedDate   DateTime?
  notified        Boolean  @default(false)
  user            User     @relation(fields: [userId], references: [id])
  @@index([notified, requestedDate])
  @@index([status, requestedDate])
}

model Appointment {
  id        Int      @id @default(autoincrement())
  userId    Int
  date      DateTime
  reason    String
  status    String
  createdAt DateTime @default(now())
  notified  Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  @@index([notified, createdAt])
}

model Blog {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  author    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactForm {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
  notified  Boolean  @default(false)
  @@index([notified, createdAt])
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

model ProductVariant {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  name      String // e.g., 'Size', 'Color'
  value     String // e.g., 'Large', 'Red'
  price     Float?
  stock     Int?
  createdAt DateTime @default(now())
}

model Review {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  name      String
  rating    Int
  text      String
  status    String   @default("pending") // or "approved"
  createdAt DateTime @default(now())
  
  @@index([productId])
  @@index([userId])
  @@index([rating])
  @@index([status])
  @@index([createdAt])
}

model Settings {
  id            Int      @id @default(1)
  siteName      String   @default("My Meds Pharmacy")
  contactEmail  String   @default("")
  contactPhone  String   @default("")
  address       String   @default("")
  businessHours String   @default("")
  facebook      String?
  instagram     String?
  twitter       String?
  updatedAt     DateTime @updatedAt
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String   // order, prescription, appointment, contact, refill, transfer, patient_verification
  title     String
  message   String
  read      Boolean  @default(false)
  data      String?  // JSON data for additional context
  createdAt DateTime @default(now())
  @@index([read, createdAt])
  @@index([type, createdAt])
}

model WooCommerceSettings {
  id              Int      @id @default(1)
  enabled         Boolean  @default(false)
  storeUrl        String?
  consumerKey     String?
  consumerSecret  String?
  webhookSecret   String?
  lastSync        DateTime?
  lastError       String?
  updatedAt       DateTime @updatedAt
}

model WordPressSettings {
  id              Int      @id @default(1)
  enabled         Boolean  @default(false)
  siteUrl         String?
  username        String?
  applicationPassword String?
  lastSync        DateTime?
  lastError       String?
  updatedAt       DateTime @updatedAt
}

model NewsletterSubscription {
  id               Int      @id @default(autoincrement())
  email            String   @unique
  source           String   @default("website")
  marketingConsent Boolean  @default(true)
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([email])
  @@index([isActive])
  @@index([createdAt])
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int?       // Optional for guest carts
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  expiresAt DateTime   @default(dbgenerated("(NOW() + INTERVAL 30 DAY)")) // Cart expires in 30 days
  items     CartItem[]
  user      User?      @relation(fields: [userId], references: [id])
  orders    Order[]    // Orders created from this cart
  
  @@index([userId])
  @@index([createdAt])
  @@index([expiresAt])
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  price     Float
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
  
  @@index([cartId])
  @@index([productId])
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}
