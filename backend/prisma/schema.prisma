// =============================================================================
// DEVELOPMENT PRISMA SCHEMA - MYSQL DATABASE
// =============================================================================
// MyMeds Pharmacy Inc. - Development Database Schema
// Generated: September 25, 2025
// =============================================================================

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// USER MANAGEMENT
// =============================================================================

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  name          String?
  password      String
  role          String    @default("USER")
  phone         String?
  permissions   String?
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  orders           Order[]
  prescriptions    Prescription[]
  appointments     Appointment[]
  refillRequests   RefillRequest[]
  transferRequests TransferRequest[]
  patientProfile   PatientProfile?
  adminSessions    AdminSession[]
  inventoryMovements InventoryMovement[]
  customerInteractions CustomerInteraction[] @relation("CustomerInteractions")
  interactionsCreated CustomerInteraction[] @relation("InteractionCreatedBy")

  @@map("users")
}

// =============================================================================
// PRODUCT MANAGEMENT
// =============================================================================

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  stock         Int      @default(0)
  imageUrl      String?
  categoryId    Int
  averageRating Float    @default(0)
  reviewCount   Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  category   Category         @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  reviews    Review[]
  cartItems  CartItem[]
  images     ProductImage[]
  variants   ProductVariant[]
  inventoryMovements InventoryMovement[]

  @@map("products")
}

// =============================================================================
// ORDER MANAGEMENT
// =============================================================================

model Order {
  id              Int      @id @default(autoincrement())
  userId          Int?
  orderNumber     String   @unique
  status          String   @default("PENDING")
  total           Float
  shippingAddress String?
  paymentMethod   String?
  paymentIntentId String?
  guestEmail      String?
  guestName       String?
  guestPhone      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  notified        Boolean  @default(false)

  // Relations
  user          User?                @relation(fields: [userId], references: [id])
  items         OrderItem[]
  guestTracking GuestOrderTracking[]

  @@map("orders")
}

model OrderItem {
  id        Int   @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float

  // Relations
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// =============================================================================
// PRESCRIPTION MANAGEMENT
// =============================================================================

model Prescription {
  id           Int      @id @default(autoincrement())
  userId       Int?
  patientName  String
  medication   String
  dosage       String
  instructions String?
  doctorName   String?
  doctorPhone  String?
  status       String   @default("PENDING")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  notified     Boolean  @default(false)

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("prescriptions")
}

// =============================================================================
// APPOINTMENT MANAGEMENT
// =============================================================================

model Appointment {
  id          Int      @id @default(autoincrement())
  userId      Int?
  patientName String
  email       String
  phone       String?
  date        DateTime
  time        String
  reason      String?
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  notified    Boolean  @default(false)

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("appointments")
}

// =============================================================================
// CONTACT & REVIEWS
// =============================================================================

model ContactForm {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  status    String   @default("NEW")
  createdAt DateTime @default(now())
  notified  Boolean  @default(false)

  @@map("contact_forms")
}

model Review {
  id            Int      @id @default(autoincrement())
  productId     Int
  rating        Int
  title         String
  comment       String
  customerName  String
  customerEmail String
  verified      Boolean  @default(false)
  status        String   @default("pending")
  adminNotes    String?
  reviewedAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id])

  @@map("reviews")
}

model Feedback {
  id                Int      @id @default(autoincrement())
  name              String
  email             String
  subject           String
  message           String
  rating            Int?
  category          String   @default("general")
  priority          String   @default("medium")
  contactPreference String   @default("email")
  phone             String?
  department        String?
  status            String   @default("new")
  ticketNumber      String   @unique
  adminNotes        String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  responses FeedbackResponse[]

  @@map("feedback")
}

model FeedbackResponse {
  id             Int      @id @default(autoincrement())
  feedbackId     Int
  message        String
  isAdminResponse Boolean  @default(true)
  createdAt      DateTime @default(now())

  // Relations
  feedback Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)

  @@map("feedback_responses")
}

// =============================================================================
// INTEGRATION SETTINGS
// =============================================================================

model WooCommerceSettings {
  id             Int       @id @default(autoincrement())
  enabled        Boolean   @default(false)
  storeUrl       String    @default("")
  consumerKey    String    @default("")
  consumerSecret String    @default("")
  webhookSecret  String    @default("")
  lastSync       DateTime?
  lastError      String?
  updatedAt      DateTime  @updatedAt

  @@map("woocommerce_settings")
}

model WordPressSettings {
  id                  Int       @id @default(autoincrement())
  enabled             Boolean   @default(false)
  siteUrl             String    @default("")
  username            String    @default("")
  applicationPassword String    @default("")
  lastSync            DateTime?
  lastError           String?
  updatedAt           DateTime  @updatedAt

  @@map("wordpress_settings")
}

// =============================================================================
// ADDITIONAL MODELS FOR FULL FUNCTIONALITY
// =============================================================================

model Blog {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  author    String
  slug      String   @unique
  status    String   @default("draft")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blogs")
}

model Cart {
  id        Int       @id @default(autoincrement())
  userId    Int?
  sessionId String?
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        Int   @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int   @default(1)
  price     Float

  // Relations
  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int?
  title     String
  message   String
  type      String   @default("info")
  data      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("notifications")
}

model RefillRequest {
  id            Int       @id @default(autoincrement())
  userId        Int
  medication    String
  dosage        String
  quantity      Int
  urgency       String    @default("normal")
  status        String    @default("pending")
  notes         String?
  requestedDate DateTime?
  notified      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("refill_requests")
}

model TransferRequest {
  id              Int       @id @default(autoincrement())
  userId          Int
  fromPharmacy    String
  toPharmacy      String
  currentPharmacy String?
  medication      String
  medications     String?
  dosage          String
  quantity        Int
  status          String    @default("pending")
  notes           String?
  requestedDate   DateTime?
  notified        Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("transfer_requests")
}

model Settings {
  id            Int      @id @default(autoincrement())
  key           String   @unique
  value         String
  siteName      String?
  contactEmail  String?
  contactPhone  String?
  address       String?
  businessHours String?
  facebook      String?
  instagram     String?
  twitter       String?
  updatedAt     DateTime @updatedAt

  @@map("settings")
}

model PatientProfile {
  id               Int       @id @default(autoincrement())
  userId           Int       @unique
  firstName        String
  lastName         String
  dateOfBirth      DateTime?
  phone            String?
  address          String?
  emergencyContact String?
  allergies        String?
  medications      String?
  medicalHistory   String?
  ssn              String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("patient_profiles")
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  url       String
  alt       String?
  order     Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id])

  @@map("product_images")
}

model ProductVariant {
  id        Int      @id @default(autoincrement())
  productId Int
  name      String
  value     String
  price     Float?
  stock     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id])

  @@map("product_variants")
}

model GuestOrderTracking {
  id             Int      @id @default(autoincrement())
  orderNumber    String   @unique
  orderId        Int?
  email          String
  status         String   @default("pending")
  trackingNumber String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  order Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("guest_order_tracking")
}

// =============================================================================
// SECURITY & AUTHENTICATION
// =============================================================================

model LoginAttempt {
  id          Int      @id @default(autoincrement())
  email       String
  ipAddress   String
  userAgent   String?
  success     Boolean  @default(false)
  failureReason String?
  createdAt   DateTime @default(now())

  @@map("login_attempts")
}

model BlacklistedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int?
  reason    String   @default("logout")
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("blacklisted_tokens")
}

model CSRFToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int?
  sessionId String?
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("csrf_tokens")
}

model AdminSession {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  ipAddress String
  userAgent String?
  expiresAt DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("admin_sessions")
}

// =============================================================================
// INVENTORY MANAGEMENT
// =============================================================================

model InventoryMovement {
  id        Int      @id @default(autoincrement())
  productId Int
  type      String   // 'IN' or 'OUT'
  quantity  Int
  reason    String
  notes     String?
  userId    Int?
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id])

  @@map("inventory_movements")
}

// =============================================================================
// CRM MANAGEMENT
// =============================================================================

model CustomerInteraction {
  id          Int      @id @default(autoincrement())
  customerId  Int
  type        String   // 'CALL', 'EMAIL', 'MEETING', 'UPDATE', 'NOTE', 'COMPLAINT', 'COMPLIMENT'
  description String
  notes       String?
  userId      Int?
  createdAt   DateTime @default(now())

  // Relations
  customer User @relation("CustomerInteractions", fields: [customerId], references: [id], onDelete: Cascade)
  user     User? @relation("InteractionCreatedBy", fields: [userId], references: [id])

  @@map("customer_interactions")
}
