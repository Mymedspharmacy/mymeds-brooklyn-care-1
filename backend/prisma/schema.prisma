generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  name          String
  role          Role           @default(CUSTOMER)
  createdAt     DateTime       @default(now())
  appointments  Appointment[]
  orders        Order[]
  prescriptions Prescription[]
  reviews       Review[]
  refillRequests RefillRequest[]
  transferRequests TransferRequest[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Product {
  id          Int              @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  imageUrl    String? // legacy, keep for now
  createdAt   DateTime         @default(now())
  categoryId  Int
  category    Category         @relation(fields: [categoryId], references: [id])
  orders      OrderItem[]
  images      ProductImage[]
  variants    ProductVariant[]
  Review      Review[]
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  total     Float
  status    String
  createdAt DateTime    @default(now())
  notified  Boolean     @default(false)
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  @@index([notified, createdAt])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Prescription {
  id           Int      @id @default(autoincrement())
  userId       Int
  medication   String
  dosage       String
  instructions String
  createdAt    DateTime @default(now())
  notified     Boolean  @default(false)
  user         User     @relation(fields: [userId], references: [id])
  @@index([notified, createdAt])
}

model RefillRequest {
  id           Int      @id @default(autoincrement())
  userId       Int
  prescriptionId Int?
  medication   String
  dosage       String
  instructions String?
  urgency      String   @default("normal") // low, normal, high, urgent
  status       String   @default("pending") // pending, approved, rejected, completed
  notes        String?
  requestedDate DateTime @default(now())
  completedDate DateTime?
  notified     Boolean  @default(false)
  user         User     @relation(fields: [userId], references: [id])
  @@index([notified, requestedDate])
  @@index([status, requestedDate])
}

model TransferRequest {
  id              Int      @id @default(autoincrement())
  userId          Int
  currentPharmacy String
  newPharmacy     String   @default("My Meds Pharmacy")
  medications     String   // JSON array of medications
  reason          String?
  status          String   @default("pending") // pending, approved, rejected, completed
  notes           String?
  requestedDate   DateTime @default(now())
  completedDate   DateTime?
  notified        Boolean  @default(false)
  user            User     @relation(fields: [userId], references: [id])
  @@index([notified, requestedDate])
  @@index([status, requestedDate])
}

model Appointment {
  id        Int      @id @default(autoincrement())
  userId    Int
  date      DateTime
  reason    String
  status    String
  createdAt DateTime @default(now())
  notified  Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  @@index([notified, createdAt])
}

model Blog {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  author    String
  createdAt DateTime @default(now())
}

model ContactForm {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
  notified  Boolean  @default(false)
  @@index([notified, createdAt])
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

model ProductVariant {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  name      String // e.g., 'Size', 'Color'
  value     String // e.g., 'Large', 'Red'
  price     Float?
  stock     Int?
  createdAt DateTime @default(now())
}

model Review {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  name      String
  rating    Int
  text      String
  status    String   @default("pending") // or "approved"
  createdAt DateTime @default(now())
}

model Settings {
  id            Int      @id @default(1)
  siteName      String   @default("My Meds Pharmacy")
  contactEmail  String   @default("")
  contactPhone  String   @default("")
  address       String   @default("")
  businessHours String   @default("")
  facebook      String?
  instagram     String?
  twitter       String?
  updatedAt     DateTime @updatedAt
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String   // order, prescription, appointment, contact, refill, transfer
  title     String
  message   String
  read      Boolean  @default(false)
  data      String?  // JSON data for additional context
  createdAt DateTime @default(now())
  @@index([read, createdAt])
  @@index([type, createdAt])
}

model WooCommerceSettings {
  id              Int      @id @default(1)
  enabled         Boolean  @default(false)
  storeUrl        String?
  consumerKey     String?
  consumerSecret  String?
  webhookSecret   String?
  lastSync        DateTime?
  updatedAt       DateTime @updatedAt
}

model WordPressSettings {
  id              Int      @id @default(1)
  enabled         Boolean  @default(false)
  siteUrl         String?
  username        String?
  applicationPassword String?
  lastSync        DateTime?
  updatedAt       DateTime @updatedAt
}

enum Role {
  ADMIN
  STAFF
  CUSTOMER
}
