generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  name          String
  role          Role           @default(CUSTOMER)
  isActive      Boolean        @default(true)
  emailVerified Boolean        @default(false)
  permissions   String?        // JSON string of permissions
  lastLoginAt   DateTime?
  passwordChangedAt DateTime?
  resetPasswordToken String?
  resetPasswordExpires DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  appointments  Appointment[]
  orders        Order[]
  prescriptions Prescription[]
  reviews       Review[]
  refillRequests RefillRequest[]
  transferRequests TransferRequest[]
  patientProfile PatientProfile?
  carts         Cart[]
  
  @@index([email])
  @@index([role])
  @@index([createdAt])
  @@index([isActive])
  @@index([emailVerified])
}

model PatientProfile {
  id                          Int      @id @default(autoincrement())
  userId                      Int      @unique
  firstName                   String
  lastName                    String
  dateOfBirth                 DateTime
  phone                       String
  ssn                         String   // Encrypted SSN
  address                     String
  city                        String
  state                       String
  zipCode                     String
  emergencyContactName        String
  emergencyContactPhone       String
  emergencyContactRelationship String
  insuranceProvider           String
  insuranceGroupNumber        String
  insuranceMemberId           String
  primaryCarePhysician        String
  physicianPhone              String
  allergies                   String?
  currentMedications          String?
  medicalConditions           String?
  governmentIdType            String
  governmentIdNumber          String
  governmentIdFile            String?  // File path
  proofOfAddressFile          String?  // File path
  insuranceCardFile           String?  // File path
  verificationStatus          String   @default("PENDING") // PENDING, VERIFIED, REJECTED
  identityVerified            Boolean  @default(false)
  addressVerified             Boolean  @default(false)
  insuranceVerified           Boolean  @default(false)
  termsAccepted               Boolean  @default(false)
  privacyPolicyAccepted       Boolean  @default(false)
  hipaaConsent                Boolean  @default(false)
  medicalAuthorization        Boolean  @default(false)
  financialResponsibility     Boolean  @default(false)
  securityQuestions           String?  // JSON string
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  user                        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([verificationStatus])
  @@index([identityVerified])
  @@index([createdAt])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Product {
  id          Int              @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  imageUrl    String? // legacy, keep for now
  images      String? // JSON array of image URLs
  categoryId  Int
  category    Category          @relation(fields: [categoryId], references: [id])
  isActive    Boolean           @default(true)
  sku         String?           @unique
  weight      Float?
  dimensions  String?          // JSON string: {length, width, height}
  tags        String?           // JSON array of tags
  metadata    String?           // JSON string for additional data
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  orderItems  OrderItem[]
  
  @@index([categoryId])
  @@index([isActive])
  @@index([sku])
  @@index([createdAt])
}

model Order {
  id              Int         @id @default(autoincrement())
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  status          OrderStatus @default(PENDING)
  total           Float
  subtotal        Float
  tax             Float
  shipping        Float
  discount        Float
  paymentMethod   String?
  paymentStatus   PaymentStatus @default(PENDING)
  shippingAddress String      // JSON string
  billingAddress  String      // JSON string
  trackingNumber  String?
  estimatedDelivery DateTime?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  items           OrderItem[]
  
  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@index([trackingNumber])
  @@index([estimatedDelivery])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  
  @@index([orderId])
  @@index([productId])
}

model Prescription {
  id           Int      @id @default(autoincrement())
  userId       Int
  medication   String
  dosage       String
  instructions String
  createdAt    DateTime @default(now())
  notified     Boolean  @default(false)
  user         User     @relation(fields: [userId], references: [id])
  @@index([notified, createdAt])
}

model RefillRequest {
  id           Int      @id @default(autoincrement())
  userId       Int
  prescriptionId Int?
  medication   String
  dosage       String
  instructions String?
  urgency      String   @default("normal") // low, normal, high, urgent
  status       String   @default("pending") // pending, approved, rejected, completed
  notes        String?
  requestedDate DateTime @default(now())
  completedDate DateTime?
  notified     Boolean  @default(false)
  user         User     @relation(fields: [userId], references: [id])
  @@index([notified, requestedDate])
  @@index([status, requestedDate])
}

model TransferRequest {
  id              Int      @id @default(autoincrement())
  userId          Int
  currentPharmacy String
  newPharmacy     String   @default("My Meds Pharmacy")
  medications     String   // JSON array of medications
  reason          String?
  status          String   @default("pending") // pending, approved, rejected, completed
  notes           String?
  requestedDate   DateTime @default(now())
  completedDate   DateTime?
  notified        Boolean  @default(false)
  user            User     @relation(fields: [userId], references: [id])
  @@index([notified, requestedDate])
  @@index([status, requestedDate])
}

model Appointment {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  date      DateTime
  time      String
  service   String
  notes     String?
  status    AppointmentStatus @default(SCHEDULED)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@index([date])
  @@index([status])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([rating])
  @@index([createdAt])
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@index([productId])
}

enum Role {
  ADMIN
  CUSTOMER
  PHARMACIST
  STAFF
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIAL_REFUND
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}
