version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: mymeds-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: mymeds_production
      MYSQL_USER: mymeds_user
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-pMyMedsSecurePassword2024!}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    networks:
      - mymeds-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mymeds-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispassword}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - mymeds-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      timeout: 3s
      retries: 5

  # MyMeds Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mymeds-app
    restart: unless-stopped
    environment:
      # Core Application Settings
      NODE_ENV: production
      PORT: 4000
      HOST: 0.0.0.0
      
      # Database Configuration
      DATABASE_URL: mysql://mymeds_user:${MYSQL_PASSWORD}@mysql:3306/mymeds_production
      DATABASE_HOST: mysql
      DATABASE_PORT: 3306
      DATABASE_NAME: mymeds_production
      DATABASE_USER: mymeds_user
      DATABASE_PASSWORD: ${MYSQL_PASSWORD}
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_EXPIRES_IN: 7d
      JWT_REFRESH_EXPIRES_IN: 30d
      
      # CORS Configuration
      CORS_ORIGINS: ${CORS_ORIGINS}
      
      # Email Configuration
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_SECURE: ${SMTP_SECURE}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      EMAIL_FROM: ${EMAIL_FROM}
      
      # WooCommerce Configuration
      WOOCOMMERCE_STORE_URL: ${WOOCOMMERCE_STORE_URL}
      WOOCOMMERCE_CONSUMER_KEY: ${WOOCOMMERCE_CONSUMER_KEY}
      WOOCOMMERCE_CONSUMER_SECRET: ${WOOCOMMERCE_CONSUMER_SECRET}
      WOOCOMMERCE_WEBHOOK_SECRET: ${WOOCOMMERCE_WEBHOOK_SECRET}
      
      # WordPress Configuration
      WORDPRESS_URL: ${WORDPRESS_URL}
      WORDPRESS_USERNAME: ${WORDPRESS_USERNAME}
      WORDPRESS_PASSWORD: ${WORDPRESS_PASSWORD}
      
      # Security Configuration
      SESSION_SECRET: ${SESSION_SECRET}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS}
      
      # Performance Configuration
      DB_POOL_MIN: ${DB_POOL_MIN}
      DB_POOL_MAX: ${DB_POOL_MAX}
      CACHE_TTL: ${CACHE_TTL}
      CACHE_MAX_SIZE: ${CACHE_MAX_SIZE}
      
      # Feature Flags
      FEATURE_WOOCOMMERCE_ENABLED: ${FEATURE_WOOCOMMERCE_ENABLED}
      FEATURE_WORDPRESS_ENABLED: ${FEATURE_WORDPRESS_ENABLED}
      FEATURE_EMAIL_VERIFICATION: ${FEATURE_EMAIL_VERIFICATION}
      FEATURE_TWO_FACTOR_AUTH: ${FEATURE_TWO_FACTOR_AUTH}
      FEATURE_ANALYTICS: ${FEATURE_ANALYTICS}
      FEATURE_BACKUP: ${FEATURE_BACKUP}
      FEATURE_MONITORING: ${FEATURE_MONITORING}
      
      # Admin Configuration
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      ADMIN_NAME: ${ADMIN_NAME}
      
      # Contact Configuration
      CONTACT_RECEIVER: ${CONTACT_RECEIVER}
      CONTACT_EMAIL: ${CONTACT_EMAIL}
      SUPPORT_EMAIL: ${SUPPORT_EMAIL}
      
      # Monitoring Configuration
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      NEW_RELIC_APP_NAME: ${NEW_RELIC_APP_NAME}
      
      # Logging Configuration
      LOG_LEVEL: ${LOG_LEVEL}
      ENABLE_MONITORING: ${ENABLE_MONITORING}
      
      # Rate Limiting Configuration
      RATE_LIMITING_ENABLED: ${RATE_LIMITING_ENABLED}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS}
      
      # Health Check Configuration
      HEALTH_CHECK_ENABLED: ${HEALTH_CHECK_ENABLED}
      HEALTH_CHECK_INTERVAL: ${HEALTH_CHECK_INTERVAL}
      HEALTH_CHECK_TIMEOUT: ${HEALTH_CHECK_TIMEOUT}
      
      # Error Handling Configuration
      ERROR_REPORTING_ENABLED: ${ERROR_REPORTING_ENABLED}
      ERROR_NOTIFICATION_EMAIL: ${ERROR_NOTIFICATION_EMAIL}
      ERROR_LOG_LEVEL: ${ERROR_LOG_LEVEL}
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
      - app_backups:/app/backups
    ports:
      - "4000:4000"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mymeds-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mymeds-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - mymeds-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backup Service
  backup:
    image: alpine:latest
    container_name: mymeds-backup
    restart: "no"
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: mymeds_user
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-pMyMedsSecurePassword2024!}
      MYSQL_DATABASE: mymeds_production
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
    volumes:
      - app_backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - mysql
    networks:
      - mymeds-network
    command: ["/bin/sh", "/backup.sh"]

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  app_backups:
    driver: local
  nginx_logs:
    driver: local

networks:
  mymeds-network:
    driver: bridge
